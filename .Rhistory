html
library(httr)
library(XML)
options(HTTPUserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36")
html2 = GET("http://www.stw.fr/marina_stw/liste_all_marina_pays.cfm?letter=M")
content2 = content(html2, as = "text")
parsedHtml = htmlParse(content2, asText = TRUE)
options(HTTPUserAgent = "R (3.1.0 x86_64-w64-mingw32 x86_64 mingw32)")
parsedHtml
library(RCurl)
options(HTTPUserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36")
html <- getURLContent("http://www.stw.fr/marina_stw/liste_all_marina_pays.cfm?letter=M", isHTTP = TRUE)
html2 <- getURL("http://www.stw.fr/marina_stw/liste_all_marina_pays.cfm?letter=M")
options(HTTPUserAgent = "R (3.1.0 x86_64-w64-mingw32 x86_64 mingw32)")
html
html2
rm(list=ls())
source("pappaAlessio.R")
source("grafico-orizzontale-2-pappa-alessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("grafico-orizzontale-2-pappa-alessio.R")
a <- rnorm(10)
b <- rnorm(10)
c <- a + b
x <- cbind(c, b, c)
x
a <- rnorm(10)
b <- rnorm(10)
c <- a + b
x <- cbind(a, b, c)
x
which(all.equal((x$a + x$b != x $c))
)
x$a + x$b != x$c
all((x$a + x$b) != x$c)
apply(x, 1, function(x) {(a+b) == c})
x[10,c] <- 2
x[10,"2"] <- 2
x
x[10,"c"]
x[10,"c"] <- 2
apply(x, 1, function(x) {(a+b) == c})
sapply(x, 1, function(x) {(a+b) == c})
sapply(x, function(x) {(a+b) == c})
lapply(x, function(x) {(a+b) == c})
sapply(x, function(x) {(a+b) == c})
tapply(x, function(x) {(a+b) == c})
apply(x, c(1,2), function(x) {(a+b) == c})
x
source("pappaAlessio.R")
source("grafico-orizzontale-2-pappa-alessio.R")
source("pappaAlessio.R")
source("grafico-orizzontale-2-pappa-alessio.R")
source("pappaAlessio.R")
source("grafico-orizzontale-2-pappa-alessio.R")
source("pappaAlessio.R")
source("grafico-orizzontale-2-pappa-alessio.R")
source("pappaAlessio.R")
source("grafico-orizzontale-2-pappa-alessio.R")
setwd("./GetClD/")
read.table("c3dbb4802bdd11e4ad546dd21970b353.txt")
str(read.table("c3dbb4802bdd11e4ad546dd21970b353.txt"))
read.table("c3dbb4802bdd11e4ad546dd21970b353.txt")[1:2,1:3]
read.table("c3dbb4802bdd11e4ad546dd21970b353.txt", header = TRUE)
read.table("c3dbb4802bdd11e4ad546dd21970b353.txt", header = TRUE)[1:2,1:3]
str(read.table("c3dbb4802bdd11e4ad546dd21970b353.txt", header = TRUE))
str(read.table("f5e0bb702bd211e49e277d32c7635d49.txt", header = TRUE))
str(read.table("64d18a802bd511e488ed9f7ddf17a589.txt", header = TRUE))
source("pappaAlessio.R")
setwd("C:/Users/Rocco/Dropbox/R-Folder")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("grafico-orizzontale-2-pappa-alessio.R")
setwd("./Webtrekk")
source("Webtrekk-JSON-RPC.R")
wtkAccountList("roccobarbini-sandbox.administrator", "Miscetto83")
source("Webtrekk-JSON-RPC.R")
wtkAccountList("roccobarbini-sandbox.administrator", "Miscetto83")
source("Webtrekk-JSON-RPC.R")
wtkAccountList("roccobarbini-sandbox.administrator", "Miscetto83")
accountList <- wtkAccountList("roccobarbini-sandbox.administrator", "Miscetto83")
str(accountList)
accounts
accountList
accountList$result
accountList$result$customerId
accountList$result[[1]]
accountList$result[[1]]$customerId
accountList <- wtkAccountList("roccobarbini-sandbox.administrator", "Miscetto83")
source("Webtrekk-JSON-RPC.R")
wtkDoLogin("roccobarbini-sandbox.administrator", "Miscetto83", "199539402492919", "en")
wtkObjMetricsList
wtkObjMetricsList()
source("Webtrekk-JSON-RPC.R")
wtkObjMetricsList()
wtkDoLogout()
source("Webtrekk-JSON-RPC.R")
wtkDoLogin("roccobarbini-sandbox.administrator", "Miscetto83", "199539402492919", "en")
wtkCustomReportsList()
source("Webtrekk-JSON-RPC.R")
wtkDynTimeIntervalsList()
wtkDynTimeIntervalsList()
wtkDoLogout()
source("Webtrekk-JSON-RPC.R")
wtkDoLogin()
wtkDoLogin("roccobarbini-sandbox.administrator", "Miscetto83", "199539402492919", "en")
wtkDoLogout()
rm(wtkToken, envir = globalenv())
source("Webtrekk-JSON-RPC.R")
wtkDoLogin("roccobarbini-sandbox.administrator", "Miscetto83", "199539402492919", "en")
wtkDoLogout()
setwd("../")
=5*180
5*180
6*2
*0.9
12/0.9
rm(list=ls()
)
source("pappaAlessio.R")
source("grafico-orizzontale-2-pappa-alessio.R")
180*3
655-540
115-70
source("grafico-orizzontale-2-pappa-alessio.R")
source("grafico-orizzontale-2-pappa-alessio.R")
source("grafico-orizzontale-2-pappa-alessio.R")
source("grafico-orizzontale-2-pappa-alessio.R")
source("grafico-orizzontale-2-pappa-alessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
plot(alessio$amount,format(.POSIXlt(alessio$datetime,tz="GMT+1"), "%H.%M"), xlim = c(30, 180), ylab = "Ore", type = "h")
plot(format(.POSIXlt(alessio$datetime,tz="GMT+1"),nrow(alessio), "%H.%M"), xlim = c(30, 180), ylab = "Ore", type = "h")
nrow(alessio)
nrow(alessio[which(format(.POSIXlt(alessio$datetime,tz="GMT+1"), "%H")==12)])
nrow(alessio[which(format(.POSIXlt(alessio$datetime,tz="GMT+1"), "%H")==12)],)
nrow(alessio[which(format(.POSIXlt(alessio$datetime,tz="GMT+1"), "%H") == 12)],)
format(.POSIXlt(alessio$datetime,tz="GMT+1"), "%H") == 12
nrow(alessio[format(.POSIXlt(alessio$datetime,tz="GMT+1"), "%H") == 12],)
format(.POSIXlt(alessio$datetime,tz="GMT+1"), "%H") == 12
alessio[format(.POSIXlt(alessio$datetime,tz="GMT+1"), "%H") == 12,]
nrow(alessio[format(.POSIXlt(alessio$datetime,tz="GMT+1"), "%H") == 12,])
table(as.factor(format(.POSIXlt(alessio[,"datetime"],tz="GMT+1"), "%d-%m-%Y")))
sum(alessio[(as.Date(alessio$datetime, format="%Y-%m-%d") == Sys.Date()) & (as.numeric(format(.POSIXlt(alessio[,"datetime"],tz="GMT+1"), "%H") < 14)),"amount"])
table(as.factor(format(.POSIXlt(alessio$datetime,tz="GMT+1"), "%H")))
tabellaPappe <- table(as.factor(format(.POSIXlt(alessio$datetime,tz="GMT+1"), "%H")))
tabellaPappe
as.list(tabellaPappe)
names(as.list(tabellaPappe))
hist(tabellaPappe)
plot(as.list(tabellaPappe),names(as.list(tabellaPappe)), xlim = c(30, 180), ylab = "Ore", type = "h")
plot(as.list(tabellaPappe),numeric(names(as.list(tabellaPappe))), xlim = c(30, 180), ylab = "Ore", type = "h")
plot(as.list(tabellaPappe),as.numeric(names(as.list(tabellaPappe))), xlim = c(30, 180), ylab = "Ore", type = "h")
plot(as.numeric(as.list(tabellaPappe)),as.numeric(names(as.list(tabellaPappe))), xlim = c(30, 180), ylab = "Ore", type = "h")
source("pappaAlessio.R")
495/2
180*2
180*2-495
180*2-495+70
160*3
160*2
+70
320+70
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
570/3
tabellaPappe
names(tabellaPappe)
attr(,"origin")
attr("origin")
attr(,"origin")
attr(Sys.Date(),"origin")
attr(julian(Sys.Date()),"origin")
weekdays(Sys.Date())
months(Sys.Date())
source("pappaAlessio.R")
source("pappaAlessio.R")
420-180-60
source("pappaAlessio.R")
source("pappaAlessio.R")
plot(alessio$amount,format(.POSIXlt(alessio$datetime,tz="GMT+1"), "%H.%M"), xlim = c(30, 180), xlab = "Grammi (misurini in arancione)", ylab = "Ore")
plot(format(.POSIXlt(alessio$datetime,tz="GMT+1"), "%H.%M"),alessio$amount, ylim = c(30, 180), ylab = "Grammi (misurini in arancione)", xlab = "Ore")
abline(h = mean(alessio$amount), col = "blue")
abline(h = median(alessio$amount), col = "red")
abline(v = 3, lty = 2)
abline(v = 6, lty = 2)
abline(v = 9, lty = 2)
abline(v = 12, lty = 2)
abline(v = 15, lty = 2)
abline(v = 18, lty = 2)
abline(v = 21, lty = 2)
abline(h = 30, lty = 3, col = "orange")
abline(h = 60, lty = 3, col = "orange")
abline(h = 90, lty = 3, col = "orange")
abline(h = 120, lty = 3, col = "orange")
abline(h = 150, lty = 3, col = "orange")
abline(h = 180, lty = 3, col = "orange")
abline(v = 4, lty = 2, col = "yellow")
abline(v = 5, lty = 2, col = "yellow")
abline(v = 7, lty = 2, col = "yellow")
abline(v = 8, lty = 2, col = "yellow")
abline(v = 10, lty = 2, col = "yellow")
abline(v = 11, lty = 2, col = "yellow")
abline(v = 13, lty = 2, col = "yellow")
abline(v = 14, lty = 2, col = "yellow")
abline(v = 16, lty = 2, col = "yellow")
abline(v = 17, lty = 2, col = "yellow")
abline(v = 19, lty = 2, col = "yellow")
abline(v = 20, lty = 2, col = "yellow")
abline(v = 22, lty = 2, col = "yellow")
abline(v = 23, lty = 2, col = "yellow")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
source("pappaAlessio.R")
x <- 1:10
x
y <- 1:5
cbind(x,y)
rbind(x,y)
z <- c(6:10,11:15)
z
z <- cbind(6:10,11:15)
z
cbind(z,y)
cbind(z,x)
rbind(z,y)
rbind(z,y[1:2])
rbind(z,y[1:2],y[3:4])
library(data.table)
DF = data.frame(x = rnorm(9), y = rep(c("a", "b", "c"), each = 3), z = rnorm(9))
DF
head(DF,3)
tables()
DT = data.table(x = rnorm(9), y = rep(c("a", "b", "c"), each = 3), z = rnorm(9))
head(DT, 3)
DT[, list(mean(x), sum(z))]
DT[, list(mean(x), sum(z),y)]
DT[, list(mean(x)-z,y)]
DT[,w:=z^2]
head(DT,3)
head(DT, n = 3)
DT[, m := {tmp <- (x+z); log2(tmp+5}]
DT[, m := {tmp <- (x+z); log2(tmp+5)}]
DT
DT[, a := x>0]
DT
.N
DT[, .N, by = a]
DT[, .N, by = y]
DT[, .N, by = z]
setkey(DT, y)
DT["a"]
DT1 <- data.table(x = c('a', 'a', 'a', 'dt1'), y = 1:4)
DT2 <- data.table(x = c('a', 'b', 'dt2'), z = 5:7)
setkey(DT1,x)
setkey(DT2,z)
merge(DT1, DT2)
library(data.table)
DT1 <- data.table(x = c('a', 'a', 'a', 'dt1'), y = 1:4)
DT2 <- data.table(x = c('a', 'b', 'dt2'), z = 5:7)
setkey(DT1,x)
setkey(DT2,z)
merge(DT1, DT2)
DT1
DT2
DT1[a]
DT1['a']
merge(DT1,DT2)
setkey(DT1,x)
setkey(DT2,x)
merge(DT1,DT2)
DT1
merge(DT1,DT2,all="true")
merge(DT1,DT2,all=true)
rm(list=ls())
x = seq(0,10,0.1)
y = 2 * sqrt(x)
plot(x, y, type = "n")
lines(x, y, type = "1")
lines(x, y, type = 1)
rm(list=ls())
x = seq(0, 1, 0.1)
y = 2.3*sqrt(x)*log2(x)
x = seq(0.1, 10, 0.1)
y = 2.3*sqrt(x)*log2(x)
sqrt(-10)
plot(x, y)
plot(x, y, type = "lines")
plot(x, y, type = "n")
lines(x, y, type = "l")
y = 2.3*sqrt(x)*log2(runif())
y = 2.3*sqrt(x)*log2(runif(1))
plot(x, y, type = "n")
lines(x, y, type = "l")
y = 2.3*sqrt(x)*log2(runif(1+x))
plot(x, y, type = "n")
lines(x, y, type = "l")
y = 2.3*sqrt(x)*log2(runif(1)+x)
plot(x, y, type = "n")
lines(x, y, type = "l")
y = 2.3*sqrt(x)*log2(runif(1)+runif(x)
y = 2.3*sqrt(x)*log2(runif(1)+runif(x))
y = 2.3*sqrt(x)*log2(runif(1)+runif(x))
plot(x, y, type = "n")
lines(x, y, type = "l")
y = 2.3*sqrt(x)*log2(runif(1))+runif(x)
plot(x, y, type = "n")
lines(x, y, type = "l")
plot(x, y)
lines(x, y, type = "l")
lm(x, y)
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
library(ggplot2)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
print.trellis(p)
library(datasets)
data(airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies) + geom_smooth()
elisaDays <- seq(1,30,1)
elisaDays <- elisaDays + 20150200
elisaDays <- seq(1,28,1)
elisaDays <- elisaDays + 20150200
elisaDays <- seq(100,2800,100)
elisaDays <- elisaDays + 2015020000
elisaDays <- strptime(elisaDays, format="%Y%m%d%H")
elisaDays
str(elisaDays)
format(elisaDays, format = "%Y-%m-%d %H")
write.csv(format(elisaDays, format = "%Y-%m-%d %H"), file = "elisaDays.csv")
library(datasets)
datasets
plot(pressure$temperature, pressure$pressure, type="l")
library(ggplot2)
qplot(pressure$temperature, pressure$pressure, geom="line")
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point()
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point(color = red)
ggplot(pressure, aes(x=temperature, y=pressure)) + geom_line() + geom_point(color = "red")
barplot(table(mtcars$cyl))
qplot(BOD$Time, BOD$demand, geom="bar", stat="identity")
curve(x^3 - 5*x, from=-4, to=4)
myfun <- function(xvar) {
1/(1 + exp(-xvar + 10))
}
curve(myfun(x), from=0, to=20)
# Add a line:
curve(1-myfun(x), add = TRUE, col = "red")
curve((x + 1)/(x - 1), from = -10, to = 10)
abline(v = 1, color = red)
abline(v = 1, color = "red")
abline(v = 1, col = "red")
abline(h = 1, col = "red")
curve((x + 1)/(x - 1), from = -10, to = 10)
abline(v = 1, col = "red")
abline(h = 0, col = "red")
curve((x + 1)/(x - 1), from = -10, to = 10)
abline(v = 0, col = "red")
abline(h = 0, col = "red")
curve(x/x)
Day <- as.Date(strptime(seq(20150209,20150218,1),format = "%Y%m%d"))
Day <- as.Date(strptime(seq(20150209,20150218,1),format = "%Y%m%d"))
seq(20150209,20150218,1)
as.Date(strptime(seq(20150209,20150218,1),format = "%Y%m%d"))
Day <- as.Date(strptime(seq(20150209,20150218,1),format = "%Y%m%d"))
rm(Dat)
rm(Day)
giorni <- as.Date(strptime(seq(20150209,20150218,1),format = "%Y%m%d"))
giorni+
giorni
rm(giorni)
Day <- as.Date(strptime(seq(20150209,20150218,1),format = "%Y%m%d"))
limits <- data.frame("Day" = Day, "Limit" = c(81,84,87,89,91,87,88,90,92,94))
qplot(data = limits, x = Day, y = Limit)
library(ggplot2)
qplot(data = limits, x = Day, y = Limit)
ggplot(data = limits, aes(Day, Limit)) + geom_area()
ggplot(data = limits, aes(Day, Limit)) + geom_area() + coord_cartesian(ylim = c(0,100))
library(ggplot2)
library(scales)
day <- as.Date(strptime(seq(20150209,20150218,1),format = "%Y%m%d"))
limit <- c(81,84,87,89,91,87,88,90,92,94)
limits <- data.frame("Day" = day, "Limit" = limit)
g <- ggplot(data = limits, aes(Day, Limit))
g <- g + geom_area()
g <- g + coord_cartesian(ylim = c(0,100))
g <- g + scale_y_continuous(labels=percent)
print(g)
library(ggplot2)
library(scales)
day <- as.Date(strptime(seq(20150209,20150218,1),format = "%Y%m%d"))
limit <- c(0.81,0.84,0.87,0.89,0.91,0.87,0.88,0.90,0.92,0.94)
limits <- data.frame("Day" = day, "Limit" = limit)
g <- ggplot(data = limits, aes(Day, Limit))
g <- g + geom_area()
g <- g + coord_cartesian(ylim = c(0,1))
g <- g + scale_y_continuous(labels=percent)
print(g)
g <- ggplot(data = limits, aes(Day, Limit))
g <- g + geom_area(color = "red")
g <- g + coord_cartesian(ylim = c(0,1))
g <- g + scale_y_continuous(labels=percent)
print(g)
g <- ggplot(data = limits, aes(Day, Limit))
g <- g + geom_area(fill = "red")
g <- g + coord_cartesian(ylim = c(0,1))
g <- g + scale_y_continuous(labels=percent)
print(g)
g <- ggplot(data = limits, aes(Day, Limit))
g <- g + geom_area(fill = "dark red")
g <- g + coord_cartesian(ylim = c(0,1))
g <- g + scale_y_continuous(labels=percent)
print(g)
setwd("C:/Users/WTRocco/Dropbox/R-Folder/RepRes/peer_ass_01/RepData_PeerAssessment1")
activity_data <- read.csv("activity.csv", stringsAsFactors = F)
my_sub_nas <- function(x) {
val_median <- round(median(x, na.rm = T))
x[!complete.cases(x)] <- val_median
x
}
activity_data_narm <- activity_data
for(i in seq(from = 0, to = 2355, by = 5)) {
val_mean <- round(mean(activity_data_narm$steps, na.rm = T))
activity_data_narm[!complete.cases(activity_data_narm$steps), "steps"] <- val_mean
}
weekend = c("sabato", "domenica", "saturday", "sunday", "Saturday", "Sunday")
for(i in 1:nrow(activity_data_narm)) {
temp_weekday <- weekdays(strptime(activity_data_narm[i, "date"], format = "%Y-%m-%d"))
if(temp_weekday %in% weekend) {
activity_data_narm[i, "weekday"] <- "weekend"
}
else {
activity_data_narm[i, "weekday"] <- "weekday"
}
}
rm(temp_weekday)
activity_data_narm$weekday <- as.factor(activity_data_narm$weekday)
str(activity_data_narm)
minute_activity_data <- aggregate(x = activity_data$steps, by = list(activity_data$interval, activity_data$weekday), FUN = "mean")
minute_activity_data <- aggregate(x = activity_data$steps, by = list(activity_data$interval), FUN = "mean")
weekday_min_act_data <- aggregate(x = activity_data$steps, by = list(activity_data$interval), FUN = "mean")
weekday_min_act_data <- aggregate(x = activity_data[which(activity_data_narm$weekday == "weekday"),steps], by = list(activity_data[which(activity_data_narm$weekday == "weekday"),interval]), FUN = "mean")
weekday_min_act_data <- aggregate(x = activity_data[which(activity_data_narm$weekday == "weekday"),"steps"], by = list(activity_data[which(activity_data_narm$weekday == "weekday"),"interval"]), FUN = "mean")
library(ggplot2)
suppressWarnings(library(ggplot2))
aggregate(. ~ interval+weekday,data = activity_data_narm,FUN=mean)
aggregate(steps ~ interval+weekday,data = activity_data_narm,FUN=mean)
rm(airquality)
rm(weekday_min_act_data)
rm(minute_activity_data)
act_weekday_interval <- aggregate(steps ~ interval+weekday,data = activity_data_narm,FUN=mean)
str(act_weekday_interval)
act_weekday_plot <- ggplot(data = act_weekday_interval, aes = (x = interval, y = steps))
act_weekday_plot <- ggplot(data = act_weekday_interval, aes = (x = "interval", y = "steps"))
ggplot(data = act_weekday_interval, aes = (x = interval, y = steps)) + geom_line()
ggplot(data = act_weekday_interval, aes(x = interval, y = steps)) + geom_line()
ggplot(data = act_weekday_interval, aes(x = interval, y = steps, facet = weekday)) + geom_line()
ggplot(data = act_weekday_interval, aes(x = interval, y = steps, facets = weekday)) + geom_line()
ggplot(data = act_weekday_interval, aes(x = interval, y = steps, col = weekday)) + geom_line()
ggplot(data = act_weekday_interval, aes(x = interval, y = steps)) + geom_line() + facet_wrap(~ weekday)
ggplot(data = act_weekday_interval, aes(x = interval, y = steps)) + geom_line() + facet_wrap(weekday ~)
ggplot(data = act_weekday_interval, aes(x = interval, y = steps)) + geom_line() + facet_wrap(weekday ~.)
ggplot(data = act_weekday_interval, aes(x = interval, y = steps)) + geom_line() + facet_wrap(~ weekday)
ggplot(data = act_weekday_interval, aes(x = interval, y = steps)) + geom_line() + facet_wrap(~ weekday, ncol = 1)
act_weekday_plot <- ggplot(data = act_weekday_interval, aes(x = interval, y = steps))
act_weekday_plot <- act_weekday_plot + geom_line()
act_weekday_plot <- act_weekday_plot + facet_wrap(~ weekday, ncol = 1)
print(act_weeekday_plot)
plot(act_weeekday_plot)
act_weekday_plot <- ggplot(data = act_weekday_interval, aes(x = interval, y = steps))
act_weekday_plot <- act_weekday_plot + geom_line()
act_weekday_plot <- act_weekday_plot + facet_wrap(~ weekday, ncol = 1)
act_weekday_plot
